{"title":"Shiny app and environments","markdown":{"yaml":{"title":"Shiny app and environments","author":"Mitsuo Shiota","date":"2021-04-09","categories":["computer science","R","Shiny"]},"headingText":"Motivation","containsRefs":false,"markdown":"\n\n\nI transformed my Shiny app, [imfweo](https://mitsuoxv.shinyapps.io/imf-weo/), into a R package. GitHub repo is [here](https://github.com/mitsuoxv/imf-weo). In the process, I fell into trouble, as I didn't understand the namespace issues. So I did some experiments, using [the monthApp example in \"Matering Shiny\"](https://mastering-shiny.org/scaling-packaging.html#single-file), and reading the [Chapter 7.4.3 Namespaces in \"Advanced R\"](https://adv-r.hadley.nz/environments.html#namespaces). Both books are written by Hadley Wickham. As always, thank you, Hadley. I write this post which shows my understanding as of today to help future me.\n\n## Namespace issues\n\n\"Where does a function find non-argument variables, like a function name and a data name?\" I call this namespace issues.\n\n## Experiments using [the monthApp example in \"Matering Shiny\"](https://mastering-shiny.org/scaling-packaging.html#single-file)\n\n- A single file: Ctl + Shift + Enter, it works fine, and Global Environment is empty.\n- A single file: Ctl + Enter, eack line works fine, and Global Environment is filled with function names like `birthstoneServer` and a data name like `stones` \n\nThis experiment suggests that the usual way, Ctl + Shift + Enter in app.R, runs in a function execution environment, not in Global Environment. Let us call this environment monthApp execution environment, even if monthApp is not yet here. I guess the file which contains `shinyApp(ui, server)` is so special that it creates a function which encloses all the codes.\n\n- A single file: Change `stones` to `units`, and Ctl + Shift + Enter, it still works.\n\nDon't forget to restart R at each experiment. Note that `units` is a function name in Base Environment. As `birthstoneServer` function is defined in monthApp execution environment, it can find `units` there.\n\n- Module files: Ctl + Shift + Enter, and you will see \"Error: object 'stones' not found\"\n- Module files: Ctl + Enter, `stones <- vroom::` line, and create `stones` in Global Environment. And then, Ctl + Shift + Enter, it works fine.\n- Module files: Change `stones` to `units`, Ctl + Shift + Enter, and you will see \"Error: object of type 'closure' is not subsettable\".\n- Module files: Then, create `units` in Global Environment, it works fine.\n\nLet us call the environment in which variables, such as `birthstoneServer` function, are defined, R directory environment: monthApp execution environment is its ephemeral child environment, and Global Environment is its parent environment. Look at the last figure in [Chapter 7.4.3 Namespaces in \"Advanced R\"](https://adv-r.hadley.nz/environments.html#namespaces), and insert R directory environment left to Global Environment. As there is no namespace: R directory environment, `birthstoneServer` function searches `stones` or `units` only in the lower row of the figure. If `stones` or `units` is in Global Environment, it can find there. If not, it can't find `stones`, or can find `units` as a function in Base Environment.\n\n- Module files: Create a new file `stones.R` and move `stones <- vroom::` line there, and it works fine.\n- Module files: Change `stones` to `units`, create a new file `units.R` and move `units <- vroom::` line there, and it works fine.\n\nIn this case, `stones` or `units` and `birthstoneServer` exist in the same R directory environment, so `birthstoneServer` can find `stones` or `units` there before searching Base Environment, or even Global Environment.\n\n- A package: Leave `stones <- vroom::` line in monthApp: \"Error: object 'stones' not found\"\n- A package: Leave `stones <- vroom::` line in monthApp: Then create `stones` in Global Environment, and it works fine.\n- A package: Leave `stones <- vroom::` line in monthApp: Change `stones` to `units`, and \"Error: object of type 'closure' is not subsettable\"\n- A package: Leave `stones <- vroom::` line in monthApp: Change `stones` to `units`, and create `units` in Global Environment. Still, \"Error: object of type 'closure' is not subsettable\"\n\nNow it is a package. Let us call it monthApp package. Insert `package: monthApp` right to Global Environment, and `namespace: monthApp` left to `namespace: stats` in the same last figure in [Chapter 7.4.3 Namespaces in \"Advanced R\"](https://adv-r.hadley.nz/environments.html#namespaces). `birthstoneServer` function searches from the top left. If `stones` is in Global Environment, it finds there, and if not, it can't find. Whether or not `units` is in Global Environment, it finds `units` as a function in `namespace: base` in the top right before searching Global Environment.\n\n- A package: Take optional extra, and create `data/stones.rda`: It works fine.\n- A package: Take optional extra, and create `data/units.rda`: \"Error: object of type 'closure' is not subsettable\"\n\nTaking optional extra to create a package dataset is to make sure `stones` or `units` is in Global Environment. So the results are the same as above in case `stones` or `units` exists in Global Environment.\n\n## For best practices\n\nI don't know what are the best practices at this moment. Joe Cheng recommends to preprocess out of Shiny what all Shiny users do in [this Youtube lecture](https://www.youtube.com/watch?v=Wy3TY0gOmJw). As for `imfweo` package, I followed his recommendation, and created a lot of .rda files in data directory. `units.rda` happened to be there, and I faced \"Error: object of type 'closure' is not subsettable\". As a solution, I first created a list, like `weo$meta$units`, and hoped `weo` doesn't match any namespace before Global Environment. In the second thought, as I update data every half a year and can compare the current one with the previous one in rolling, I decided to pass every data variable as an argument. As result, I can be sure there will be no accidental match in namespaces, but the codes have become more difficult to read, as there are so many non-reactive arguments.\n\nI am not a developer but a practitioner. Environments are hard to understand. Future me, if you are confused, come back to this post.\n","srcMarkdownNoYaml":"\n\n## Motivation\n\nI transformed my Shiny app, [imfweo](https://mitsuoxv.shinyapps.io/imf-weo/), into a R package. GitHub repo is [here](https://github.com/mitsuoxv/imf-weo). In the process, I fell into trouble, as I didn't understand the namespace issues. So I did some experiments, using [the monthApp example in \"Matering Shiny\"](https://mastering-shiny.org/scaling-packaging.html#single-file), and reading the [Chapter 7.4.3 Namespaces in \"Advanced R\"](https://adv-r.hadley.nz/environments.html#namespaces). Both books are written by Hadley Wickham. As always, thank you, Hadley. I write this post which shows my understanding as of today to help future me.\n\n## Namespace issues\n\n\"Where does a function find non-argument variables, like a function name and a data name?\" I call this namespace issues.\n\n## Experiments using [the monthApp example in \"Matering Shiny\"](https://mastering-shiny.org/scaling-packaging.html#single-file)\n\n- A single file: Ctl + Shift + Enter, it works fine, and Global Environment is empty.\n- A single file: Ctl + Enter, eack line works fine, and Global Environment is filled with function names like `birthstoneServer` and a data name like `stones` \n\nThis experiment suggests that the usual way, Ctl + Shift + Enter in app.R, runs in a function execution environment, not in Global Environment. Let us call this environment monthApp execution environment, even if monthApp is not yet here. I guess the file which contains `shinyApp(ui, server)` is so special that it creates a function which encloses all the codes.\n\n- A single file: Change `stones` to `units`, and Ctl + Shift + Enter, it still works.\n\nDon't forget to restart R at each experiment. Note that `units` is a function name in Base Environment. As `birthstoneServer` function is defined in monthApp execution environment, it can find `units` there.\n\n- Module files: Ctl + Shift + Enter, and you will see \"Error: object 'stones' not found\"\n- Module files: Ctl + Enter, `stones <- vroom::` line, and create `stones` in Global Environment. And then, Ctl + Shift + Enter, it works fine.\n- Module files: Change `stones` to `units`, Ctl + Shift + Enter, and you will see \"Error: object of type 'closure' is not subsettable\".\n- Module files: Then, create `units` in Global Environment, it works fine.\n\nLet us call the environment in which variables, such as `birthstoneServer` function, are defined, R directory environment: monthApp execution environment is its ephemeral child environment, and Global Environment is its parent environment. Look at the last figure in [Chapter 7.4.3 Namespaces in \"Advanced R\"](https://adv-r.hadley.nz/environments.html#namespaces), and insert R directory environment left to Global Environment. As there is no namespace: R directory environment, `birthstoneServer` function searches `stones` or `units` only in the lower row of the figure. If `stones` or `units` is in Global Environment, it can find there. If not, it can't find `stones`, or can find `units` as a function in Base Environment.\n\n- Module files: Create a new file `stones.R` and move `stones <- vroom::` line there, and it works fine.\n- Module files: Change `stones` to `units`, create a new file `units.R` and move `units <- vroom::` line there, and it works fine.\n\nIn this case, `stones` or `units` and `birthstoneServer` exist in the same R directory environment, so `birthstoneServer` can find `stones` or `units` there before searching Base Environment, or even Global Environment.\n\n- A package: Leave `stones <- vroom::` line in monthApp: \"Error: object 'stones' not found\"\n- A package: Leave `stones <- vroom::` line in monthApp: Then create `stones` in Global Environment, and it works fine.\n- A package: Leave `stones <- vroom::` line in monthApp: Change `stones` to `units`, and \"Error: object of type 'closure' is not subsettable\"\n- A package: Leave `stones <- vroom::` line in monthApp: Change `stones` to `units`, and create `units` in Global Environment. Still, \"Error: object of type 'closure' is not subsettable\"\n\nNow it is a package. Let us call it monthApp package. Insert `package: monthApp` right to Global Environment, and `namespace: monthApp` left to `namespace: stats` in the same last figure in [Chapter 7.4.3 Namespaces in \"Advanced R\"](https://adv-r.hadley.nz/environments.html#namespaces). `birthstoneServer` function searches from the top left. If `stones` is in Global Environment, it finds there, and if not, it can't find. Whether or not `units` is in Global Environment, it finds `units` as a function in `namespace: base` in the top right before searching Global Environment.\n\n- A package: Take optional extra, and create `data/stones.rda`: It works fine.\n- A package: Take optional extra, and create `data/units.rda`: \"Error: object of type 'closure' is not subsettable\"\n\nTaking optional extra to create a package dataset is to make sure `stones` or `units` is in Global Environment. So the results are the same as above in case `stones` or `units` exists in Global Environment.\n\n## For best practices\n\nI don't know what are the best practices at this moment. Joe Cheng recommends to preprocess out of Shiny what all Shiny users do in [this Youtube lecture](https://www.youtube.com/watch?v=Wy3TY0gOmJw). As for `imfweo` package, I followed his recommendation, and created a lot of .rda files in data directory. `units.rda` happened to be there, and I faced \"Error: object of type 'closure' is not subsettable\". As a solution, I first created a list, like `weo$meta$units`, and hoped `weo` doesn't match any namespace before Global Environment. In the second thought, as I update data every half a year and can compare the current one with the previous one in rolling, I decided to pass every data variable as an argument. As result, I can be sure there will be no accidental match in namespaces, but the codes have become more difficult to read, as there are so many non-reactive arguments.\n\nI am not a developer but a practitioner. Environments are hard to understand. Future me, if you are confused, come back to this post.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":6,"fig-height":3.708,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"source","theme":"cosmo","title-block-banner":true,"title":"Shiny app and environments","author":"Mitsuo Shiota","date":"2021-04-09","categories":["computer science","R","Shiny"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}